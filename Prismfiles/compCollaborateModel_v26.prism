smg

//top level system 
system "MC"
"C1" || "C2"  //a set of decision makers / components
endsystem

//sub-system
system "C1"
M1
endsystem

system "C2"
M2
endsystem

//===========================
//USER-DEFINED PARAMETERS
const double MAXUT = 0.7; //UB for the utility value
const int GOAL_TY = 5; //UB for collaborators (for filtering)
const int GOAL_TY_Q1 = 1; //performance violation
const int GOAL_TY_Q2 = 2; //availability
const int GOAL_TY_Q3 = 3; //safety
const int GOAL_TY_UT = 4; //utility-based
const int GOAL_TY_ML = 5; //multi

const int MAX_CLOUD_LOAD = 50; //UB for cpu load of a cloud


//============================
//PROBING PARAMETERS


//=============================
//APPLICATION REQUIREMENTS
const int APP0_ID; //= 0;
const int APP0_CPU_CORES; // = 1;
const double APP0_CPU_LOADS; // = 30;
const double APP0_CPU_SPEED; // = 300;
const int APP0_TOTALMEMORY; // = 20;
const int APP0_FREEMEMORY; // = 20;
//const int APP0_LOCATION = 1;

const int APP1_ID; // = 1;
const int APP1_CPU_CORES; // = 1;
const double APP1_CPU_LOADS; // = 25;
const double APP1_CPU_SPEED; // = 600;
const int APP1_TOTALMEMORY; // = 20;
const int APP1_FREEMEMORY; // = 20;
//const int APP1_LOCATION = 1;


//===============================
//RESOURCE PROFILES
const int RS0_ID = 0;
const int RS0_CPU_CORES = 1;
const double RS0_CPU_LOADS; // = 65;
const double RS0_CPU_LOADS_A = 35;
const double RS0_CPU_LOADS_B = 35;
const double RS0_CPU_SPEED; // = 2000;
const int RS0_TOTALMEMORY = 1000;
const int RS0_FREEMEMORY = 300;
const int RS0_LOCATION = 0;

const int RS1_ID = 1;
const int RS1_CPU_CORES = 1;
const double RS1_CPU_LOADS; // = 60;
const double RS1_CPU_LOADS_A = 15;
const double RS1_CPU_LOADS_B = 15;
const double RS1_CPU_SPEED; // = 2000;
const int RS1_TOTALMEMORY = 1000;
const int RS1_FREEMEMORY = 600;
const int RS1_LOCATION = 1;

const int RS2_ID = 2;
const int RS2_CPU_CORES = 1;
const double RS2_CPU_LOADS; // = 35;
const double RS2_CPU_LOADS_A = 10;
const double RS2_CPU_LOADS_B = 25;
const double RS2_CPU_SPEED; // = 2593;
const int RS2_TOTALMEMORY = 1000;
const int RS2_FREEMEMORY = 700;
const int RS2_LOCATION = 2;

const int RS3_ID = 3;
const int RS3_CPU_CORES = 1;
const double RS3_CPU_LOADS; // = 30;
const double RS3_CPU_LOADS_A = 10;
const double RS3_CPU_LOADS_B = 20;
const double RS3_CPU_SPEED; // = 2593;
const int RS3_TOTALMEMORY = 1000;
const int RS3_FREEMEMORY = 300;
const int RS3_LOCATION = 3;

const int RS4_ID = 4;
const int RS4_CPU_CORES = 1;
const double RS4_CPU_LOADS; // = 30;
const double RS4_CPU_LOADS_A = 20;
const double RS4_CPU_LOADS_B = 10;
const double RS4_CPU_SPEED; // = 2593;
const int RS4_TOTALMEMORY = 1000;
const int RS4_FREEMEMORY = 550;
const int RS4_LOCATION = 4;

const int RS5_ID = 5;
const int RS5_CPU_CORES = 1;
const double RS5_CPU_LOADS; // = 40;
const double RS5_CPU_LOADS_A = 25;
const double RS5_CPU_LOADS_B = 15;
const double RS5_CPU_SPEED; // = 2593;
const int RS5_TOTALMEMORY = 1000;
const int RS5_FREEMEMORY = 450;
const int RS5_LOCATION = 5;

const int RS6_ID = 6;
const int RS6_CPU_CORES = 1;
const double RS6_CPU_LOADS; // = 60;
const double RS6_CPU_LOADS_A = 30;
const double RS6_CPU_LOADS_B = 30;
const double RS6_CPU_SPEED; // = 2593;
const int RS6_TOTALMEMORY = 1000;
const int RS6_FREEMEMORY = 650;
const int RS6_LOCATION = 6;

const int RS7_ID = 7;
const int RS7_CPU_CORES = 1;
const double RS7_CPU_LOADS; // = 40;
const double RS7_CPU_LOADS_A = 20;
const double RS7_CPU_LOADS_B = 20;
const double RS7_CPU_SPEED; // = 2000;
const int RS7_TOTALMEMORY = 1000;
const int RS7_FREEMEMORY = 800;
const int RS7_LOCATION = 7;


//=======================================
//PROBABILISTIC PARAMETERS
const double AVA_RS0 = 0.7;
const double AVA_RS1 = 0.6;
const double AVA_RS2 = 0.5;
const double AVA_RS3 = 0.4;
const double AVA_RS4 = 0.7;
const double AVA_RS5 = 0.6;
const double AVA_RS6 = 0.5;
const double AVA_RS7 = 0.4;

const double AVB_RS0 = 0.7;
const double AVB_RS1 = 0.6;
const double AVB_RS2 = 0.5;
const double AVB_RS3 = 0.4;
const double AVB_RS4 = 0.7;
const double AVB_RS5 = 0.6;
const double AVB_RS6 = 0.5;
const double AVB_RS7 = 0.4;

//=======================================
//GLOBAL PARAMETERS


//=======================================
//MODULE FOR COMPONENT 1
module M1
ta:[0..2] init 1;      //to control the turn
sela:[-1..7] init -1;
goala: bool init false;
execa: bool init false;

// P1 moves:
//appx_rsy_sat - represents the satisfaction of performance violation
//[r0a!] (ta=0) & (app0_rs0_sat_ml_all=false) & (goala=false) -> (goala'=true) & (sela'=0) & (ta'=1);
[r0a!] (ta=0) & (goala=false) & (app0_rs0_sat_ml_all=true) -> (goala'=true) & (sela'=0) & (ta'=1);
[r1a!] (ta=0) & (goala=false) & (app0_rs1_sat_ml_all=true) -> (goala'=true) & (sela'=1) & (ta'=1);
[r2a!] (ta=0) & (goala=false) & (app0_rs2_sat_ml_all=true) -> (goala'=true) & (sela'=2) & (ta'=1);
[r3a!] (ta=0) & (goala=false) & (app0_rs3_sat_ml_all=true) -> (goala'=true) & (sela'=3) & (ta'=1);
[r4a!] (ta=0) & (goala=false) & (app0_rs4_sat_ml_all=true) -> (goala'=true) & (sela'=4) & (ta'=1);
[r5a!] (ta=0) & (goala=false) & (app0_rs5_sat_ml_all=true) -> (goala'=true) & (sela'=5) & (ta'=1);
[r6a!] (ta=0) & (goala=false) & (app0_rs6_sat_ml_all=true) -> (goala'=true) & (sela'=6) & (ta'=1);
[r7a!] (ta=0) & (goala=false) & (app0_rs7_sat_ml_all=true) -> (goala'=true) & (sela'=7) & (ta'=1);


//terminate the process
[enda!] (ta=0) -> (ta'=2);
[enda!] (ta=0) & (goala=true) -> (ta'=2);
[enda!] (ta=0) & (goala=true) & (execa=true) -> (ta'=2);

// P2 moves:
[ch0a?] (ta=1) & (execa=false) & (sela=0) -> AVA_RS0:(execa'=true) & (ta'=2) + 1-AVA_RS0:(execa'=false) & (ta'=2);
[ch1a?] (ta=1) & (execa=false) & (sela=1) -> AVA_RS1:(execa'=true) & (ta'=2) + 1-AVA_RS1:(execa'=false) & (ta'=2);
[ch2a?] (ta=1) & (execa=false) & (sela=2) -> AVA_RS2:(execa'=true) & (ta'=2) + 1-AVA_RS2:(execa'=false) & (ta'=2);
[ch3a?] (ta=1) & (execa=false) & (sela=3) -> AVA_RS3:(execa'=true) & (ta'=2) + 1-AVA_RS3:(execa'=false) & (ta'=2);
[ch4a?] (ta=1) & (execa=false) & (sela=4) -> AVA_RS4:(execa'=true) & (ta'=2) + 1-AVA_RS4:(execa'=false) & (ta'=2);
[ch5a?] (ta=1) & (execa=false) & (sela=5) -> AVA_RS5:(execa'=true) & (ta'=2) + 1-AVA_RS5:(execa'=false) & (ta'=2);
[ch6a?] (ta=1) & (execa=false) & (sela=6) -> AVA_RS6:(execa'=true) & (ta'=2) + 1-AVA_RS6:(execa'=false) & (ta'=2);
[ch7a?] (ta=1) & (execa=false) & (sela=7) -> AVA_RS7:(execa'=true) & (ta'=2) + 1-AVA_RS7:(execa'=false) & (ta'=2);

//start the move
[be?] (ta=1) -> (ta'=2);
//[end?] (ta=2) -> (ta'=2);

//schedule the turn between subsystems
[] (ta=2) -> (ta'=0);


endmodule

//=============================================
//=============================================
//=============================================
//MODULE FOR COMPONENT 2

module M2
tb:[0..2] init 1;      //to control the turn
selb:[-1..7] init -1;
goalb: bool init false;
execb: bool init false;


// P1 moves:
[r0b!] (tb=0) & (goalb=false) & (app1_rs0_sat_ml_all=true) -> (goalb'=true) & (selb'=0) & (tb'=1);
[r1b!] (tb=0) & (goalb=false) & (app1_rs1_sat_ml_all=true) -> (goalb'=true) & (selb'=1) & (tb'=1);
[r2b!] (tb=0) & (goalb=false) & (app1_rs2_sat_ml_all=true) -> (goalb'=true) & (selb'=2) & (tb'=1);
[r3b!] (tb=0) & (goalb=false) & (app1_rs3_sat_ml_all=true) -> (goalb'=true) & (selb'=3) & (tb'=1);
[r4b!] (tb=0) & (goalb=false) & (app1_rs4_sat_ml_all=true) -> (goalb'=true) & (selb'=4) & (tb'=1);
[r5b!] (tb=0) & (goalb=false) & (app1_rs5_sat_ml_all=true) -> (goalb'=true) & (selb'=5) & (tb'=1);
[r6b!] (tb=0) & (goalb=false) & (app1_rs6_sat_ml_all=true) -> (goalb'=true) & (selb'=6) & (tb'=1);
[r7b!] (tb=0) & (goalb=false) & (app1_rs7_sat_ml_all=true) -> (goalb'=true) & (selb'=7) & (tb'=1);

//terminate the process
[endb!] (tb=0) -> (tb'=2);
[endb!] (tb=0) & (goalb=true) -> (tb'=2);
[endb!] (tb=0) & (goalb=true) & (execb=true) -> (tb'=2);

// P2 moves:
[ch0b?] (tb=1) & (execb=false) & (selb=0) -> AVB_RS0:(execb'=true) & (tb'=2) + 1-AVB_RS0:(execb'=false) & (tb'=2);
[ch1b?] (tb=1) & (execb=false) & (selb=1) -> AVB_RS1:(execb'=true) & (tb'=2) + 1-AVB_RS1:(execb'=false) & (tb'=2);
[ch2b?] (tb=1) & (execb=false) & (selb=2) -> AVB_RS2:(execb'=true) & (tb'=2) + 1-AVB_RS2:(execb'=false) & (tb'=2);
[ch3b?] (tb=1) & (execb=false) & (selb=3) -> AVB_RS3:(execb'=true) & (tb'=2) + 1-AVB_RS3:(execb'=false) & (tb'=2);
[ch4b?] (tb=1) & (execb=false) & (selb=4) -> AVB_RS4:(execb'=true) & (tb'=2) + 1-AVB_RS4:(execb'=false) & (tb'=2);
[ch5b?] (tb=1) & (execb=false) & (selb=5) -> AVB_RS5:(execb'=true) & (tb'=2) + 1-AVB_RS5:(execb'=false) & (tb'=2);
[ch6b?] (tb=1) & (execb=false) & (selb=6) -> AVB_RS6:(execb'=true) & (tb'=2) + 1-AVB_RS6:(execb'=false) & (tb'=2);
[ch7b?] (tb=1) & (execb=false) & (selb=7) -> AVB_RS7:(execb'=true) & (tb'=2) + 1-AVB_RS7:(execb'=false) & (tb'=2);

//start the move
[be?] (tb=1) -> (tb'=2);
//[end?] (tb=2) -> (tb'=2);

//schedule the turn between subsystems
[] (tb=2) -> (tb'=0);


endmodule


//=================================
//Computation for aggregation-based

//formula uv_all = uv_cs * WG_CS + uv_rt * WG_RT + uv_fr * WG_FR;
formula app0_uv_all = 0.6;
formula app1_uv_all = 0.6;

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS0

//to check the satisfaction of CPU Cores
formula app0_rs0_sat_q1 = ( (APP0_CPU_CORES <= RS0_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs0_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS0_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs0_sat_q3 = ( (APP0_CPU_SPEED <= RS0_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs0_sat_ml_all = ( (app0_rs0_sat_q1=true) & 
				(app0_rs0_sat_q2=true) & 
				(app0_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs0_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs0_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs0_sat_ml_all : true)))));

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS1

//to check the satisfaction of CPU Cores
formula app0_rs1_sat_q1 = ( (APP0_CPU_CORES <= RS1_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs1_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS1_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs1_sat_q3 = ( (APP0_CPU_SPEED <= RS1_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs1_sat_ml_all = ( (app0_rs1_sat_q1=true) & 
				(app0_rs1_sat_q2=true) & 
				(app0_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs1_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs1_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs1_sat_ml_all : true)))));



//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS2

//to check the satisfaction of CPU Cores
formula app0_rs2_sat_q1 = ( (APP0_CPU_CORES <= RS2_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs2_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD- RS2_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs2_sat_q3 = ( (APP0_CPU_SPEED <= RS2_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs2_sat_ml_all = ( (app0_rs2_sat_q1=true) & 
				(app0_rs2_sat_q2=true) & 
				(app0_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs2_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs2_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs2_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS3

//to check the satisfaction of CPU Cores
formula app0_rs3_sat_q1 = ( (APP0_CPU_CORES <= RS3_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs3_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS3_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs3_sat_q3 = ( (APP0_CPU_SPEED <= RS3_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs3_sat_ml_all = ( (app0_rs3_sat_q1=true) & 
				(app0_rs3_sat_q2=true) & 
				(app0_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs3_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs3_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs3_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS4

//to check the satisfaction of CPU Cores
formula app0_rs4_sat_q1 = ( (APP0_CPU_CORES <= RS4_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs4_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS4_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs4_sat_q3 = ( (APP0_CPU_SPEED <= RS4_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs4_sat_ml_all = ( (app0_rs4_sat_q1=true) & 
				(app0_rs4_sat_q2=true) & 
				(app0_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs4_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs4_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs4_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS5

//to check the satisfaction of CPU Cores
formula app0_rs5_sat_q1 = ( (APP0_CPU_CORES <= RS5_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs5_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS5_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs5_sat_q3 = ( (APP0_CPU_SPEED <= RS5_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs5_sat_ml_all = ( (app0_rs5_sat_q1=true) & 
				(app0_rs5_sat_q2=true) & 
				(app0_rs5_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs5_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs5_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs5_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs5_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs5_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs5_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs5_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS6

//to check the satisfaction of CPU Cores
formula app0_rs6_sat_q1 = ( (APP0_CPU_CORES <= RS6_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs6_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS6_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs6_sat_q3 = ( (APP0_CPU_SPEED <= RS6_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs6_sat_ml_all = ( (app0_rs6_sat_q1=true) & 
				(app0_rs6_sat_q2=true) & 
				(app0_rs6_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs6_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs6_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs6_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs6_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs6_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs6_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs6_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS7

//to check the satisfaction of CPU Cores
formula app0_rs7_sat_q1 = ( (APP0_CPU_CORES <= RS7_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs7_sat_q2 = ( (APP0_CPU_LOADS <= (MAX_CLOUD_LOAD - RS7_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs7_sat_q3 = ( (APP0_CPU_SPEED <= RS7_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs7_sat_ml_all = ( (app0_rs7_sat_q1=true) & 
				(app0_rs7_sat_q2=true) & 
				(app0_rs7_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs7_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs7_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs7_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs7_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs7_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs7_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs7_sat_ml_all : true)))));




//=================================
//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS0=======

//to check the satisfaction of CPU Cores
formula app1_rs0_sat_q1 = ( (APP1_CPU_CORES <= RS0_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs0_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS0_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs0_sat_q3 = ( (APP1_CPU_SPEED <= RS0_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs0_sat_ml_all = ( (app1_rs0_sat_q1=true) & 
				(app1_rs0_sat_q2=true) & 
				(app1_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs0_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs0_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs0_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS1=======

//to check the satisfaction of CPU Cores
formula app1_rs1_sat_q1 = ( (APP1_CPU_CORES <= RS1_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs1_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS1_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs1_sat_q3 = ( (APP1_CPU_SPEED <= RS1_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs1_sat_ml_all = ( (app1_rs1_sat_q1=true) & 
				(app1_rs1_sat_q2=true) & 
				(app1_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs1_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs1_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs1_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS2=======

//to check the satisfaction of CPU Cores
formula app1_rs2_sat_q1 = ( (APP1_CPU_CORES <= RS2_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs2_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS2_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs2_sat_q3 = ( (APP1_CPU_SPEED <= RS2_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs2_sat_ml_all = ( (app1_rs2_sat_q1=true) & 
				(app1_rs2_sat_q2=true) & 
				(app1_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs2_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs2_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs2_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS3=======

//to check the satisfaction of CPU Cores
formula app1_rs3_sat_q1 = ( (APP1_CPU_CORES <= RS3_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs3_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS3_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs3_sat_q3 = ( (APP1_CPU_SPEED <= RS3_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs3_sat_ml_all = ( (app1_rs3_sat_q1=true) & 
				(app1_rs3_sat_q2=true) & 
				(app1_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs3_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs3_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs3_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS4=======

//to check the satisfaction of CPU Cores
formula app1_rs4_sat_q1 = ( (APP1_CPU_CORES <= RS4_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs4_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS4_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs4_sat_q3 = ( (APP1_CPU_SPEED <= RS4_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs4_sat_ml_all = ( (app1_rs4_sat_q1=true) & 
				(app1_rs4_sat_q2=true) & 
				(app1_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs4_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs4_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs4_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS5=======

//to check the satisfaction of CPU Cores
formula app1_rs5_sat_q1 = ( (APP1_CPU_CORES <= RS5_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs5_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS5_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs5_sat_q3 = ( (APP1_CPU_SPEED <= RS5_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs5_sat_ml_all = ( (app1_rs5_sat_q1=true) & 
				(app1_rs5_sat_q2=true) & 
				(app1_rs5_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs5_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs5_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs5_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs5_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs5_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs5_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs5_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS6=======

//to check the satisfaction of CPU Cores
formula app1_rs6_sat_q1 = ( (APP1_CPU_CORES <= RS6_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs6_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS6_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs6_sat_q3 = ( (APP1_CPU_SPEED <= RS6_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs6_sat_ml_all = ( (app1_rs6_sat_q1=true) & 
				(app1_rs6_sat_q2=true) & 
				(app1_rs6_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs6_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs6_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs6_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs6_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs6_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs6_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs6_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS7=======

//to check the satisfaction of CPU Cores
formula app1_rs7_sat_q1 = ( (APP1_CPU_CORES <= RS7_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs7_sat_q2 = ( (APP1_CPU_LOADS <= (MAX_CLOUD_LOAD - RS7_CPU_LOADS)) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs7_sat_q3 = ( (APP1_CPU_SPEED <= RS7_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs7_sat_ml_all = ( (app1_rs7_sat_q1=true) & 
				(app1_rs7_sat_q2=true) & 
				(app1_rs7_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs7_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs7_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs7_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs7_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs7_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs7_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs7_sat_ml_all : true)))));



//==============================================
//FORMULA FOR THE REWARD STRUCTURES
//formula rwd_r4_g0_cpu_loads = 
//((sela=selb) & (sela=4 | selb=4)) ? (RS4_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS) : RS0_CPU_LOADS;

formula rwd_r0_cpu_loads = RS0_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r1_cpu_loads = RS1_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r2_cpu_loads = RS2_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r3_cpu_loads = RS3_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r4_cpu_loads = RS4_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r5_cpu_loads = RS5_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r6_cpu_loads = RS6_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

formula rwd_r7_cpu_loads = RS7_CPU_LOADS + APP0_CPU_LOADS + APP1_CPU_LOADS;

             
//--------------------
formula max_rw_cpu_speed = max(APP0_CPU_SPEED, APP1_CPU_SPEED);


//------------------------
//formula success_a = (sela > -1 ? true : false);
//formula success_b = (selb > -1 ? true : false);
//==============================================
//REWARD STRUCTURE - FOR DIFFERENT CLOUD


//for component 1 : cpu speed
rewards "c1_rt"
[r0a] true : APP0_CPU_SPEED + 1.0;
[r1a] true : APP0_CPU_SPEED + 2.0;
[r2a] true : APP0_CPU_SPEED + 3.0;
[r3a] true : APP0_CPU_SPEED + 4.0;
[r4a] true : APP0_CPU_SPEED + 1.0;
[r5a] true : APP0_CPU_SPEED + 2.0;
[r6a] true : APP0_CPU_SPEED + 3.0;
[r7a] true : APP0_CPU_SPEED + 4.0;
endrewards

//for component 1 : cpu load
rewards "c1_ru"
[r0a] true : RS0_CPU_LOADS + APP0_CPU_LOADS;
[r1a] true : RS1_CPU_LOADS + APP0_CPU_LOADS;
[r2a] true : RS2_CPU_LOADS + APP0_CPU_LOADS;
[r3a] true : RS3_CPU_LOADS + APP0_CPU_LOADS;
[r4a] true : RS4_CPU_LOADS + APP0_CPU_LOADS;
[r5a] true : RS5_CPU_LOADS + APP0_CPU_LOADS;
[r6a] true : RS6_CPU_LOADS + APP0_CPU_LOADS;
[r7a] true : RS7_CPU_LOADS + APP0_CPU_LOADS;
endrewards

//for component 2 : cpu speed
rewards "c2_rt"
[r0b] true : APP1_CPU_SPEED + 1.0;
[r1b] true : APP1_CPU_SPEED + 2.0;
[r2b] true : APP1_CPU_SPEED + 3.0;
[r3b] true : APP1_CPU_SPEED + 4.0;
[r4b] true : APP1_CPU_SPEED + 1.0;
[r5b] true : APP1_CPU_SPEED + 2.0;
[r6b] true : APP1_CPU_SPEED + 3.0;
[r7b] true : APP1_CPU_SPEED + 4.0;
endrewards

//for component 2 : cpu load
rewards "c2_ru"
[r0b] true : RS0_CPU_LOADS + APP1_CPU_LOADS;
[r1b] true : RS1_CPU_LOADS + APP1_CPU_LOADS;
[r2b] true : RS2_CPU_LOADS + APP1_CPU_LOADS;
[r3b] true : RS3_CPU_LOADS + APP1_CPU_LOADS;
[r4b] true : RS4_CPU_LOADS + APP1_CPU_LOADS;
[r5b] true : RS5_CPU_LOADS + APP1_CPU_LOADS;
[r6b] true : RS6_CPU_LOADS + APP1_CPU_LOADS;
[r7b] true : RS7_CPU_LOADS + APP1_CPU_LOADS;
endrewards


//==============================================
//REWARD STRUCTURE - FOR THE SAME CLOUD

//for component 1 : cpu speed 
rewards "c1max_rt" 
[r0a] true : max_rw_cpu_speed;
[r1a] true : max_rw_cpu_speed;
[r2a] true : max_rw_cpu_speed;
[r3a] true : max_rw_cpu_speed;
[r4a] true : max_rw_cpu_speed;
[r5a] true : max_rw_cpu_speed;
[r6a] true : max_rw_cpu_speed;
[r7a] true : max_rw_cpu_speed;
endrewards

//for component 2 : cpu speed 
rewards "c2max_rt" 
[r0b] true : max_rw_cpu_speed;
[r1b] true : max_rw_cpu_speed;
[r2b] true : max_rw_cpu_speed;
[r3b] true : max_rw_cpu_speed;
[r4b] true : max_rw_cpu_speed;
[r5b] true : max_rw_cpu_speed;
[r6b] true : max_rw_cpu_speed;
[r7b] true : max_rw_cpu_speed;
endrewards


 
//for component 1 : cpu load 
//perhaps I need to introduce a variable
rewards "c1sum_ru"
[r0a] true : rwd_r0_cpu_loads;
[r1a] true : rwd_r1_cpu_loads;
[r2a] true : rwd_r2_cpu_loads;
[r3a] true : rwd_r3_cpu_loads;
[r4a] true : rwd_r4_cpu_loads;
[r5a] true : rwd_r5_cpu_loads;
[r6a] true : rwd_r6_cpu_loads;
[r7a] true : rwd_r7_cpu_loads;
endrewards

rewards "c2sum_ru"
[r0b] true : rwd_r0_cpu_loads;
[r1b] true : rwd_r1_cpu_loads;
[r2b] true : rwd_r2_cpu_loads;
[r3b] true : rwd_r3_cpu_loads;
[r4b] true : rwd_r4_cpu_loads;
[r5b] true : rwd_r5_cpu_loads;
[r6b] true : rwd_r6_cpu_loads;
[r7b] true : rwd_r7_cpu_loads;
endrewards

//-------------------------------
//overall cpu loads
rewards "sum_ru"
[r0a] true : RS0_CPU_LOADS + APP0_CPU_LOADS;
[r1a] true : RS1_CPU_LOADS + APP0_CPU_LOADS;
[r2a] true : RS2_CPU_LOADS + APP0_CPU_LOADS;
[r3a] true : RS3_CPU_LOADS + APP0_CPU_LOADS;
[r4a] true : RS4_CPU_LOADS + APP0_CPU_LOADS;
[r5a] true : RS5_CPU_LOADS + APP0_CPU_LOADS;
[r6a] true : RS6_CPU_LOADS + APP0_CPU_LOADS;
[r7a] true : RS7_CPU_LOADS + APP0_CPU_LOADS;
[r0b] true : RS0_CPU_LOADS + APP1_CPU_LOADS;
[r1b] true : RS1_CPU_LOADS + APP1_CPU_LOADS;
[r2b] true : RS2_CPU_LOADS + APP1_CPU_LOADS;
[r3b] true : RS3_CPU_LOADS + APP1_CPU_LOADS;
[r4b] true : RS4_CPU_LOADS + APP1_CPU_LOADS;
[r5b] true : RS5_CPU_LOADS + APP1_CPU_LOADS;
[r6b] true : RS6_CPU_LOADS + APP1_CPU_LOADS;
[r7b] true : RS7_CPU_LOADS + APP1_CPU_LOADS;
endrewards

rewards "max_rt"
[r0a] true : max_rw_cpu_speed;
[r1a] true : max_rw_cpu_speed;
[r2a] true : max_rw_cpu_speed;
[r3a] true : max_rw_cpu_speed;
[r4a] true : max_rw_cpu_speed;
[r5a] true : max_rw_cpu_speed;
[r6a] true : max_rw_cpu_speed;
[r7a] true : max_rw_cpu_speed;
[r0b] true : max_rw_cpu_speed;
[r1b] true : max_rw_cpu_speed;
[r2b] true : max_rw_cpu_speed;
[r3b] true : max_rw_cpu_speed;
[r4b] true : max_rw_cpu_speed;
[r5b] true : max_rw_cpu_speed;
[r6b] true : max_rw_cpu_speed;
[r7b] true : max_rw_cpu_speed;
endrewards

//rewards "avail1_rs"
//success_a=true : 1;
//endrewards

//rewards "avail2_rs"
//success_b=true : 1;
//endrewards


//==========================================
//LABELS
label "done1" = (goala=true & sela>-1 & ta=2 & execa=true);
label "done2" = (goalb=true & selb>-1 & tb=2 & execb=true);

label "same" = (sela>-1 & selb>-1 & sela=selb);

label "diff" = (sela!=selb);

label "satisfy" = (goala=true | goalb=true);